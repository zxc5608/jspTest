model1: 요청을 jsp가 접수 ,응답도 jsp에서 생성
		비즈니스 로직(model)이 jsp(view)안에서 호출됨
		만약 다른jsp(view)에서도 동일한 비즈니스 로직(model)을 사용할 경우
		비즈니스 로직의 변결시 많은 코드 수정이 동반된다 --> 유지보수의 어려움

model2:

MVC패턴 : Model - view -controller
		각 역할을 담당하는 객체를 분리
		controller: 요청을 접수 , 비즈니스 로직을 호출 및 저장(scope)
		Model : 비즈니스 로직 처리
		View : 화면 출력을 담당
		
		model1과 다르게 view와 model을 분리
		view에서 필요한 데이터는 scope객체를 통해 받는다.

Front Controller: 모든 요청을 하나의 객체가 접수받는 형태
				장점: 테스트 관리가 편해진다
				
pojo



